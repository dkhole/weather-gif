{"version":3,"sources":["index.js"],"names":["lookup","require","apiKey","process","weatherKey","Hourly","props","hour","map","index","newHour","Date","dt","temp","toString","slice","hourImg","weather","icon","stringHour","className","key","alt","src","Week","week","day","newDay","dayImg","stringDay","WeatherInfo","style","zIndex","backgroundColor","bgCol","id","city","currentIcon","min","max","feelsLike","description","hourly","weekly","Delete","onClick","Cities","cityList","e","handleDel","Weather","state","country","Array","fill","gif","citiesOpened","weatherCollection","countryInp","main","temp_min","minString","parseInt","temp_max","maxString","feels_like","daily","cityName","charAt","toUpperCase","cities","this","citiesString","includes","concat","localStorage","setItem","JSON","stringify","setState","data","images","original","url","fetch","mode","response","json","lat","coord","lon","sys","collection","responseGiph","processAPI","alert","length","countryName","countryObj","byCountry","prompt","iso2","byIso","weatherCityCountry","weatherCity","cityString","toLowerCase","cityInput","document","getElementById","countryInput","value","getWeather","target","textContent","stopPropagation","parentElement","indexOf","splice","getItem","parse","backgroundImage","toggleCities","pickCity","delCity","type","placeholder","search","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.89006d64.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst lookup = require('country-code-lookup');\nconst apiKey = process.env.REACT_APP_GIPHY_API_KEY;\nconst weatherKey = process.env.REACT_APP_WEATHER_API_KEY;\nconst weird = 0;\n\nfunction Hourly(props) {\n  const hourly = props.hour;\n\n  return hourly.map((hour, index) => {\n    if (hour) {\n      const newHour = new Date(hour.dt * 1000);\n      const temp = hour.temp.toString().slice(0, 2);\n      const hourImg = hour.weather[0].icon;\n      const stringHour = newHour.toString().slice(16, 21);\n      return (\n        <div className=\"hourly-wrap\" key={hour.dt}>\n          <div key={index + 100} className=\"hourly\">\n            {stringHour}\n          </div>\n          <img\n            key={index + 200}\n            className=\"hourly-icon\"\n            alt=\"weather icon\"\n            src={`https://openweathermap.org/img/wn/${hourImg}@2x.png`}\n          ></img>\n          <div key={index} className=\"hourly-temp\">\n            {temp}&#8451;\n          </div>\n        </div>\n      );\n    }\n    return null;\n  });\n}\n\nfunction Week(props) {\n  const weekly = props.week;\n\n  return weekly.map((day, index) => {\n    if (day) {\n      const newDay = new Date(day.dt * 1000);\n      const temp = day.temp.day.toString().slice(0, 2);\n      const dayImg = day.weather[0].icon;\n      const stringDay = newDay.toString().slice(0, 3);\n      return (\n        <div className=\"weekly-wrap\" key={day.dt}>\n          <div key={index + 100} className=\"weekly\">\n            {stringDay}\n          </div>\n          <img\n            key={index + 200}\n            className=\"weekly-icon\"\n            alt=\"daily icon\"\n            src={`https://openweathermap.org/img/wn/${dayImg}@2x.png`}\n          ></img>\n          <div key={index} className=\"weekly-temp\">\n            {temp}&#8451;\n          </div>\n        </div>\n      );\n    }\n    return null;\n  });\n}\n\nfunction WeatherInfo(props) {\n  return (\n    <div\n      className=\"wrapper\"\n      style={{ zIndex: props.zIndex, backgroundColor: props.bgCol }}\n    >\n      <div id=\"city-title\">{props.city}</div>\n      <div className=\"temp\">{props.temp}&#8451;</div>\n      <div className=\"main-icon\">\n        <img id=\"current-icon\" alt=\"icon\" src={props.currentIcon}></img>\n      </div>\n      <div className=\"min\">min {props.min}&#8451;</div>\n      <div className=\"max\">max {props.max}&#8451;</div>\n      <div className=\"feels-like\">feels like {props.feelsLike}&#8451;</div>\n      <div className=\"description\">{props.description}</div>\n      <hr></hr>\n      <div className=\"hourly-title\">Hourly</div>\n      <div className=\"hourly-wrapper\">\n        <Hourly hour={props.hourly} />\n      </div>\n      <div className=\"weekly-title\">Week</div>\n      <div className=\"weekly-wrapper\">\n        <Week week={props.weekly} />\n      </div>\n    </div>\n  );\n}\n\nfunction Delete(props) {\n  return <span onClick={props.onClick}>X</span>;\n}\n\nfunction Cities(props) {\n  const cityList = props.cityList;\n\n  return cityList.map((city, index) => {\n    return (\n      <div className=\"cities\" onClick={(e) => props.onClick(e)} key={index}>\n        {city}\n        <Delete onClick={(e) => props.handleDel(e)} />\n      </div>\n    );\n  });\n}\n\nclass Weather extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      country: 'country',\n      city: '',\n      temp: 0,\n      min: 0,\n      max: 0,\n      feelsLike: 0,\n      hourly: Array(7).fill(null),\n      weekly: Array(8).fill(null),\n      currentIcon: '',\n      cityList: [],\n      zIndex: -1,\n      gif: '',\n      bgCol: 'var(--weather-bg-color)',\n      description: '',\n      className: 'cities-wrapper',\n      citiesOpened: 'true',\n    };\n  }\n\n  processAPI(weather, weatherCollection, gif, city, countryInp, description) {\n    const min = weather.main.temp_min;\n    const minString = parseInt(min);\n    const max = weather.main.temp_max;\n    const maxString = parseInt(max);\n    const feelsLike = parseInt(weather.main.feels_like);\n    const hourly = weatherCollection.hourly.slice(0, 7);\n    const weekly = weatherCollection.daily.slice(1);\n    const currentIcon = `https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`;\n\n    const cityName = city.charAt(0).toUpperCase() + city.slice(1);\n    let cities = this.state.cityList.slice();\n    const citiesString = cityName + ', ' + countryInp;\n\n    if (!cities.includes(citiesString)) {\n      cities = cities.concat([citiesString]);\n      localStorage.setItem('cityList', JSON.stringify(cities));\n    }\n\n    this.setState({\n      country: countryInp,\n      city: city,\n      temp: weather.main.temp,\n      min: minString,\n      max: maxString,\n      feelsLike: feelsLike,\n      hourly: hourly,\n      weekly: weekly,\n      currentIcon: currentIcon,\n      cityList: cities,\n      zIndex: 0,\n      gif: gif.data.images.original.url,\n      bgCol: 'var(--weather-bg-color)',\n      description: description,\n    });\n  }\n\n  async weatherCity(city) {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${weatherKey}`,\n        { mode: 'cors' }\n      );\n      const weather = await response.json();\n\n      const lat = weather.coord.lat;\n      const lon = weather.coord.lon;\n      const country = weather.sys.country;\n      const description = weather.weather[0].description.toString();\n\n      const collection = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=current,minutely&appid=${weatherKey}`,\n        { mode: 'cors' }\n      );\n      const weatherCollection = await collection.json();\n      const responseGiph = await fetch(\n        `https://api.giphy.com/v1/gifs/random?api_key=${apiKey}&tag=${description}`,\n        { mode: 'cors' }\n      );\n      const gif = await responseGiph.json();\n\n      this.processAPI(\n        weather,\n        weatherCollection,\n        gif,\n        city,\n        country,\n        description\n      );\n    } catch {\n      alert('cant find locationheere');\n    }\n  }\n\n  async weatherCityCountry(city, country) {\n    try {\n      let countryInp = '';\n      if (country.length > 2) {\n        const countryName = country.charAt(0).toUpperCase() + country.slice(1);\n        const countryObj = lookup.byCountry(countryName);\n        if (!countryObj) {\n          prompt('cant find country');\n          return;\n        }\n        countryInp = countryObj.iso2;\n      } else {\n        //added this to allow us to lookup by iso\n        const countryObj = lookup.byIso(country.toUpperCase());\n        if (!countryObj) {\n          prompt('cant find country');\n          return;\n        }\n        countryInp = countryObj.iso2;\n      }\n\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryInp}&units=metric&appid=6b6a481228e382e26d9b7d7b23154bf7`,\n        { mode: 'cors' }\n      );\n      const weather = await response.json();\n\n      const lat = weather.coord.lat;\n      const lon = weather.coord.lon;\n\n      const description = weather.weather[0].description;\n\n      const collection = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=current,minutely&appid=6b6a481228e382e26d9b7d7b23154bf7`,\n        { mode: 'cors' }\n      );\n      const weatherCollection = await collection.json();\n      //call giphy api\n      const responseGiph = await fetch(\n        `https://api.giphy.com/v1/gifs/translate?api_key=${apiKey}&s=${description}&weirdness=${weird}`,\n        { mode: 'cors' }\n      );\n      const gif = await responseGiph.json();\n\n      this.processAPI(\n        weather,\n        weatherCollection,\n        gif,\n        city,\n        countryInp,\n        description\n      );\n    } catch (err) {\n      alert('cant find location');\n    }\n  }\n\n  getWeather(city, country) {\n    //const logo;\n    if (!city && !country) {\n      const city = this.state.cityList[0];\n      if (city) {\n        const cityString = city.slice(0, city.length - 4).toLowerCase();\n        const country = city.slice(city.length - 2, city.length).toLowerCase();\n        this.weatherCityCountry(cityString, country);\n      }\n    } else if (!country) {\n      this.weatherCity(city);\n    } else {\n      this.weatherCityCountry(city, country);\n    }\n  }\n\n  search(e) {\n    const cityInput = document.getElementById('city-input');\n    const countryInput = document.getElementById('country-input');\n\n    this.setState({\n      zIndex: -1,\n      bgCol: 'rgb(0,51,78)',\n    });\n\n    if ((!cityInput.value && !countryInput.value) || !cityInput.value) {\n      return alert('At least a city is required');\n    } else {\n      this.getWeather(cityInput.value, countryInput.value);\n      cityInput.value = '';\n      countryInput.value = '';\n    }\n  }\n\n  pickCity(e) {\n    //convert city to country code and city name\n    //use them to make another API call\n\n    //start loading\n    this.setState({\n      zIndex: -5,\n      bgCol: 'rgb(0,51,78)',\n    });\n    const city = e.target.textContent;\n    const length = city.length;\n    const country = city.slice(length - 3, length - 1).toLowerCase();\n    const cityString = city.slice(0, length - 5).toLowerCase();\n\n    this.getWeather(cityString, country);\n  }\n\n  delCity(e) {\n    e.stopPropagation();\n\n    const cities = this.state.cityList.slice();\n    const length = e.target.parentElement.textContent.length;\n    const city = e.target.parentElement.textContent.slice(0, length - 1);\n\n    const index = cities.indexOf(city);\n    //found so remove and rerender\n    if (index > -1) {\n      cities.splice(index, 1);\n\n      localStorage.setItem('cityList', JSON.stringify(cities));\n      this.setState({\n        cityList: cities,\n      });\n    }\n  }\n\n  toggleCities() {\n    if (this.state.citiesOpened) {\n      this.setState({\n        className: 'cities-wrapper-closed',\n        citiesOpened: false,\n      });\n    } else {\n      this.setState({\n        className: 'cities-wrapper',\n        citiesOpened: true,\n      });\n    }\n  }\n\n  //set state calls render so if you call set state in render it will create infinite loop\n  //to avoid this run inside component did mount. This function will only be called after render finishes the first time\n  componentDidMount() {\n    if (localStorage.getItem('cityList')) {\n      const cities = JSON.parse(localStorage.getItem('cityList'));\n\n      if (cities[0]) {\n        const city = cities[0];\n        const cityString = city.slice(0, city.length - 4).toLowerCase();\n        const country = city.slice(city.length - 2, city.length).toLowerCase();\n\n        this.getWeather(cityString, country);\n\n        this.setState({\n          cityList: cities,\n        });\n      }\n    } else {\n      this.getWeather('eastwood', 'australia');\n    }\n  }\n\n  render() {\n    const style = {\n      backgroundImage: `url(${this.state.gif})`,\n    };\n\n    return (\n      <div id=\"app\">\n        <div id={this.state.className}>\n          <div id=\"close\" onClick={() => this.toggleCities()}></div>\n          <Cities\n            cityList={this.state.cityList}\n            onClick={(e) => {\n              this.pickCity(e);\n            }}\n            handleDel={(e) => this.delCity(e)}\n          />\n        </div>\n        <div id=\"main\">\n          <div id=\"input-wrapper\">\n            <input type=\"text\" id=\"country-input\" placeholder=\"Country\"></input>\n            <input type=\"text\" id=\"city-input\" placeholder=\"City\"></input>\n            <input\n              type=\"button\"\n              id=\"submit\"\n              value=\"submit\"\n              onClick={(e) => this.search(e)}\n            ></input>\n          </div>\n          <div id=\"overlay\">\n            <div id=\"background-overlay\" style={style}></div>\n            <WeatherInfo\n              country={this.state.country}\n              city={this.state.city}\n              temp={this.state.temp}\n              currentIcon={this.state.currentIcon}\n              min={this.state.min}\n              max={this.state.max}\n              feelsLike={this.state.feelsLike}\n              hourly={this.state.hourly}\n              weekly={this.state.weekly}\n              zIndex={this.state.zIndex}\n              bgCol={this.state.bgCol}\n              description={this.state.description}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Weather />, document.getElementById('root'));\n"],"sourceRoot":""}
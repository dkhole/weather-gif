{"version":3,"sources":["index.js"],"names":["lookup","require","apiKey","Hourly","props","hour","map","index","newHour","Date","dt","temp","toString","slice","hourImg","weather","icon","stringHour","className","key","alt","src","Week","week","day","newDay","dayImg","stringDay","WeatherInfo","style","zIndex","backgroundColor","bgCol","id","city","currentIcon","min","max","feelsLike","description","hourly","weekly","Delete","onClick","Cities","cityList","e","handleDel","Weather","state","country","Array","fill","gif","weatherCollection","countryInp","main","temp_min","minString","parseInt","temp_max","maxString","feels_like","daily","cityName","charAt","toUpperCase","cities","this","citiesString","includes","concat","localStorage","setItem","JSON","stringify","setState","data","images","original","url","fetch","mode","response","json","lat","coord","lon","sys","collection","responseGiph","processAPI","alert","length","countryName","countryObj","byCountry","prompt","iso2","byIso","weatherCityCountry","weatherCity","cityString","toLowerCase","cityInput","document","getElementById","countryInput","value","getWeather","stopPropagation","target","textContent","console","log","indexOf","splice","getItem","parse","backgroundImage","pickCity","delCity","type","placeholder","search","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.04c85790.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst lookup = require('country-code-lookup');\nconst apiKey = '6flguaZ4XstDNrv8tZpNurgUyFWCh3x6';\nconst weird = 0;\n\nfunction Hourly(props) {\n    const hourly = props.hour;\n  \n    return hourly.map((hour, index) => {\n      if(hour) {\n        const newHour = new Date(hour.dt * 1000);\n        const temp = hour.temp.toString().slice(0,2);\n        const hourImg = hour.weather[0].icon;\n        const stringHour = newHour.toString().slice(16, 21);\n        return (\n          <div className=\"hourly-wrap\" key={hour.dt}>\n            <div key={index + 100} className=\"hourly\">{stringHour}</div>\n            <img key={index + 200} className=\"hourly-icon\" alt=\"weather icon\" src={`http://openweathermap.org/img/wn/${hourImg}@2x.png`}></img>\n            <div key={index} className=\"hourly-temp\">{temp}&#8451;</div>\n          </div>\n        );\n      }\n      return null;\n    });\n}\n\nfunction Week(props) {\n  const weekly = props.week;\n\n  return weekly.map((day, index) => {\n    if(day) {\n      const newDay = new Date(day.dt * 1000);\n      const temp = day.temp.day.toString().slice(0, 2);\n      const dayImg = day.weather[0].icon;\n      const stringDay = newDay.toString().slice(0, 3);\n      return (\n        <div className=\"weekly-wrap\" key={day.dt}>\n          <div key={index + 100} className=\"weekly\">{stringDay}</div>\n          <img key={index + 200} className=\"weekly-icon\" alt=\"daily icon\" src={`http://openweathermap.org/img/wn/${dayImg}@2x.png`}></img>\n          <div key={index} className=\"weekly-temp\">{temp}&#8451;</div>\n        </div>\n      );\n    }\n    return null;\n  });\n}\n\nfunction WeatherInfo(props) {\n\n  return (\n    <div className=\"wrapper\" style={{zIndex:props.zIndex, backgroundColor:props.bgCol}}>\n      <div id=\"city-title\">{props.city}</div>\n      <div className=\"temp\">{props.temp}&#8451;</div>\n      <div className=\"main-icon\"><img id=\"current-icon\" alt=\"icon\" src={props.currentIcon}></img></div>\n      <div className=\"min\">min {props.min}&#8451;</div>\n      <div className=\"max\">max {props.max}&#8451;</div>\n      <div className=\"feels-like\">feels like {props.feelsLike}&#8451;</div>\n      <div className=\"description\">{props.description}</div>\n      <hr></hr>\n      <div className=\"hourly-title\">Hourly</div>\n      <div className=\"hourly-wrapper\"><Hourly hour={props.hourly}/></div>\n      <div className=\"weekly-title\">Week</div>\n      <div className=\"weekly-wrapper\"><Week week={props.weekly}/></div>\n    </div>\n  );\n}\n\nfunction Delete(props) {\n  return <span onClick={props.onClick}>X</span>\n}\n\nfunction Cities(props) {\n  const cityList = props.cityList;\n\n  return cityList.map((city, index) => {\n    return <div className=\"cities\" onClick={(e) => props.onClick(e)} key={index}>{city}<Delete onClick={() => props.handleDel(city)}/></div>\n  });\n}\n\nclass Weather extends React.Component {\n\n  constructor(props) {\n    super();\n    this.state = {\n      country: 'country',\n      city: '', \n      temp: 0, \n      min: 0,\n      max: 0, \n      feelsLike: 0,\n      hourly: Array(7).fill(null),\n      weekly: Array(8).fill(null),\n      currentIcon: '',\n      cityList: [],\n      zIndex: -1,\n      gif: '',\n      bgCol: 'var(--weather-bg-color)',\n      description: '',\n    };\n  }\n\n  processAPI(weather, weatherCollection, gif, city, countryInp, description) {\n    const min = weather.main.temp_min;\n    const minString = parseInt(min);\n    const max = weather.main.temp_max;\n    const maxString = parseInt(max);\n    const feelsLike = parseInt(weather.main.feels_like);\n    const hourly = weatherCollection.hourly.slice(0, 7);\n    const weekly = weatherCollection.daily.slice(1);\n    const currentIcon = `http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`;\n\n    const cityName = city.charAt(0).toUpperCase() + city.slice(1);\n    let cities = this.state.cityList.slice();\n    const citiesString = cityName + ', ' + countryInp;\n\n    if(!cities.includes(citiesString)) {\n      cities = cities.concat([citiesString]);\n      localStorage.setItem(\"cityList\", JSON.stringify(cities));\n    } \n    this.setState({\n      country: countryInp,\n      city: city, \n      temp: weather.main.temp, \n      min: minString,\n      max: maxString, \n      feelsLike: feelsLike,\n      hourly: hourly,\n      weekly: weekly,\n      currentIcon: currentIcon,\n      cityList: cities,\n      zIndex: 0,\n      gif: gif.data.images.original.url,\n      bgCol: 'var(--weather-bg-color)',\n      description: description,\n    });\n  }\n\n  async weatherCity(city) {\n    try {\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=6b6a481228e382e26d9b7d7b23154bf7`, { mode: 'cors' })\n      const weather = await response.json();\n      \n      const lat = weather.coord.lat;\n      const lon = weather.coord.lon;\n      const country = weather.sys.country;\n      const description = weather.weather[0].description;\n\n      const collection = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=current,minutely&appid=6b6a481228e382e26d9b7d7b23154bf7`, { mode: 'cors' })\n      const weatherCollection = await collection.json();\n      const responseGiph = await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=${apiKey}&s=${description}&weirdness=${weird}`, { mode: 'cors'})\n      const gif = await responseGiph.json();\n  \n      this.processAPI(weather, weatherCollection, gif, city, country, description);\n    } catch {\n      alert(\"cant find locationheere\");\n    }\n\n  }\n\n  async weatherCityCountry(city, country) {\n\n    try {\n      let countryInp = '';\n\n      if(country.length > 2) {\n        const countryName = country.charAt(0).toUpperCase() + country.slice(1);\n        const countryObj = lookup.byCountry(countryName);\n        if(!countryObj) {\n          prompt(\"cant find country\");\n          return;\n        }\n        countryInp = countryObj.iso2;\n      } else {\n        //added this to allow us to lookup by iso\n        const countryObj = lookup.byIso(country.toUpperCase());\n        if(!countryObj) {\n          prompt(\"cant find country\");\n          return;\n        }\n        countryInp = countryObj.iso2;\n      }\n\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${countryInp}&units=metric&appid=6b6a481228e382e26d9b7d7b23154bf7`, { mode: 'cors' })\n      const weather = await response.json();\n\n      const lat = weather.coord.lat;\n      const lon = weather.coord.lon;\n\n      const description = weather.weather[0].description;\n\n      const collection = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=current,minutely&appid=6b6a481228e382e26d9b7d7b23154bf7`, { mode: 'cors' })\n      const weatherCollection = await collection.json();\n      //call giphy api\n      const responseGiph = await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=${apiKey}&s=${description}&weirdness=${weird}`, { mode: 'cors'})\n      const gif = await responseGiph.json();\n\n      this.processAPI(weather, weatherCollection, gif, city, countryInp, description);\n      \n    } catch(err) {\n      alert(\"cant find location\");\n    }\n    \n  }\n\n  getWeather(city, country) {\n      //const logo;\n      if(!city && !country) {\n        const city = this.state.cityList[0];\n        if(city) {\n          const cityString = city.slice(0, city.length - 4).toLowerCase();\n          const country = city.slice(city.length - 2, city.length).toLowerCase();\n          this.weatherCityCountry(cityString, country);\n        }\n      }\n      else if(!country) {\n        this.weatherCity(city);\n      } else {\n        this.weatherCityCountry(city, country);\n    }\n  }\n  \n  search(e) {\n    const cityInput = document.getElementById(\"city-input\");\n    const countryInput = document.getElementById(\"country-input\");\n    \n    this.setState({\n      zIndex: -1,\n      bgCol: 'rgb(0,51,78)',\n    });\n\n    if((!cityInput.value && !countryInput.value) || !cityInput.value) {\n      return alert(\"At least a city is required\");\n    } else {\n      this.getWeather(cityInput.value, countryInput.value);\n      cityInput.value = '';\n      countryInput.value = '';\n    }\n  }\n\n  pickCity(e) {\n    //convert city to country code and city name\n    //use them to make another API call\n    e.stopPropagation();\n    //start loading\n    this.setState({\n      zIndex: -5,\n      bgCol: 'rgb(0,51,78)',\n    });\n\n    const city = e.target.textContent;\n    const length = city.length;\n    const country = city.slice(length-3, length-1).toLowerCase();\n    const cityString = city.slice(0, length-5).toLowerCase();\n\n    this.getWeather(cityString,country);\n  }\n\n  delCity(city) {\n    const cities = this.state.cityList.slice();\n    console.log(city);\n    const index = cities.indexOf(city);\n    //found so remove and rerender\n    if(index > -1) {\n      cities.splice(index, 1);\n\n      localStorage.setItem(\"cityList\", JSON.stringify(cities));\n      prompt(cities);\n      this.setState({\n        cityList: cities,\n      });\n    }\n  }\n\n  //set state calls render so if you call set state in render it will create infinite loop\n  //to avoid this run inside component did mount. This function will only be called after render finished the first time\n  componentDidMount() {\n\n    if(localStorage.getItem('cityList')) {\n      const cities = JSON.parse(localStorage.getItem('cityList'));\n\n      if(cities[0]) {\n        const city = cities[0];\n        const cityString = city.slice(0, city.length - 4).toLowerCase();\n        const country = city.slice(city.length - 2, city.length).toLowerCase();\n  \n        this.getWeather(cityString,country);\n  \n        this.setState({\n          cityList: cities,\n        });\n      }\n\n    } else {\n      this.getWeather('eastwood','australia');\n    }\n  }\n\n  render() {\n\n    //if(this.state)\n\n    const style = {\n      backgroundImage: `url(${this.state.gif})`,\n    }\n\n    return (\n      <div id=\"app\">\n        <div id=\"cities-wrapper\">\n          History\n          <Cities cityList={this.state.cityList} onClick={(e) => {this.pickCity(e)}} handleDel={(city) => this.delCity(city)}/>\n        </div>\n        <div id=\"input-wrapper\">\n          <input type=\"text\" id=\"country-input\" placeholder=\"Country\"></input><input type=\"text\" id=\"city-input\" placeholder=\"City\"></input><input type=\"button\" id=\"submit\" value=\"submit\" onClick={(e) => this.search(e)}></input>\n        </div>\n        <div id=\"overlay\">\n        <div id=\"background-overlay\" style={style} ></div>\n          <WeatherInfo \n            country={this.state.country}\n            city={this.state.city}\n            temp={this.state.temp}\n            currentIcon={this.state.currentIcon}\n            min={this.state.min}\n            max={this.state.max}\n            feelsLike={this.state.feelsLike}\n            hourly={this.state.hourly}\n            weekly={this.state.weekly}\n            zIndex={this.state.zIndex}\n            bgCol={this.state.bgCol}\n            description={this.state.description}\n          />\n        </div>\n      </div> \n      \n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Weather />,\n  document.getElementById('root')\n);"],"sourceRoot":""}